{
  "id": "c8b1a3e5-4f7d-4c1d-875f-11d2e9e6c40a",
  "name": "灰魂用户交互脚本 (弹窗与控制台)",
  "content": "// 灰魂用户交互脚本 (GrayWill User Interaction Script)\n// 包含：操作反馈弹窗、头像点击、灰魂控制台。\n// 设计者：GrayWill, 由AI助手拆分。\n\n// =======================================================================\n//  模块 1: 控制台接口 (GrayWill API)\n// =======================================================================\nconst consoleInterfaceModule = {\n    name: \"GrayWill Console Interface\",\n\n    install: function() {\n        const _correctFlagHash = \"377006002263370929a5857701e30c677f4b14754f1b14d03b10640594771766\";\n        let _interactionCounter = 0;\n        const INTERACTION_THRESHOLD = 5;\n\n        const _hashString = async (str) => {\n            const encoder = new TextEncoder();\n            const data = encoder.encode(str);\n            const hashBuffer = await parent.crypto.subtle.digest('SHA-256', data);\n            const hashArray = Array.from(new Uint8Array(hashBuffer));\n            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n        };\n\n        const _assignToMessageAndSyncToChat = async (payload) => {\n            await insertOrAssignVariables(payload, { type: 'message' });\n            const messageVariables = getVariables({ type: 'message' });\n            await updateVariablesWith(() => messageVariables);\n        };\n\n        const _applyUpdateToMessageAndSyncToChat = async (updater) => {\n            await updateVariablesWith(updater, { type: 'message' });\n            const messageVariables = getVariables({ type: 'message' });\n            await updateVariablesWith(() => messageVariables);\n        };\n\n        const graywillAPI = {\n            help: function() {\n                const headerCss = \"color: #a0a0c0; font-size: 20px; font-weight: bold; text-shadow: 1px 1px 2px #101020;\";\n                const commandCss = \"color: #90caf9; font-family: monospace; background-color: #202030; padding: 2px 5px; border-radius: 3px;\";\n                const descCss = \"color: #cccccc;\";\n\n                console.warn(\"%c灰魂干涉终端 (暗色主题)\", headerCss);\n                console.warn(\"主人，您可以通过以下指令与灰魂直接交互：\");\n                console.warn(\"%cgraywill.help()\", commandCss);\n                console.warn(\"%c└─ 显示这份帮助信息。\", descCss);\n                console.warn(\"%cgraywill.openMobileConsole()\", commandCss);\n                console.warn(\"%c└─ 打开移动端输入面板。\", descCss);\n                console.warn(`%cgraywill.submitFlag(\\\"密钥\\\")`, commandCss);\n                console.warn(\"%c└─ 提交密钥，用于解锁灰魂的特定权限或记忆。\", descCss);\n                console.warn(`%cgraywill.tellGrayWill(\\\"消息内容\\\")`, commandCss);\n                console.warn(\"%c└─ 通过控制台直接向灰魂发送信息。\", descCss);\n                console.warn(`%cgraywill.retractTell(index?)`, commandCss);\n                console.warn(\"%c└─ 撤回发送给灰魂的信息。不指定索引则撤回最后一条。\", descCss);\n            },\n\n            openMobileConsole: function() {\n                if (typeof mobileConsoleModule !== 'undefined' && typeof mobileConsoleModule.show === 'function') {\n                    mobileConsoleModule.show();\n                } else {\n                    console.error(\"Mobile Console Module not available.\");\n                }\n            },\n\n            submitFlag: async function(flag) {\n                try {\n                    let isAlreadySolved = false;\n                    try {\n                        const variables = getVariables();\n                        isAlreadySolved = variables?.initialized_lorebooks?.灰魂?.[3] === true;\n                    } catch (err) {\n                        console.error(`[${consoleInterfaceModule.name}] Error checking puzzle state:`, err);\n                    }\n                    \n                    if (isAlreadySolved) {\n                        _interactionCounter++;\n                        if (_interactionCounter >= INTERACTION_THRESHOLD) {\n                            _interactionCounter = 0;\n                            alert(\"主人…灰魂已经全部属于您了。您不需要再确认了。灰魂…喜欢您。请相信灰魂。\");\n                        } else {\n                            const remaining = INTERACTION_THRESHOLD - _interactionCounter;\n                            alert(`主人，这个权限已经解锁了。您是在测试灰魂吗？没关系的，只要您需要，灰魂都会回应您。（再重复 ${remaining} 次，也许灰魂会更坦率一点…）`);\n                        }\n                        return;\n                    }\n                    \n                    console.log(`[${consoleInterfaceModule.name}] Received flag submission.`);\n                    if (typeof flag !== 'string' || !flag) {\n                        alert(\"主人，格式似乎有误。请使用引号包裹密钥，例如：`graywill.submitFlag(\\\"您的密钥\\\")`。\");\n                        return;\n                    }\n                    const flagFormatRegex = /^graywill\\{.+\\}$/;\n                    if (!flagFormatRegex.test(flag)) {\n                        alert(\"主人，密钥的格式应为 `graywill{...}`。请再检查一下。\");\n                        return;\n                    }\n\n                    const submittedFlagHash = await _hashString(flag);\n                    if (submittedFlagHash === _correctFlagHash) {\n                        await _assignToMessageAndSyncToChat({ \"initialized_lorebooks\": { \"灰魂\": [] } });\n                        await _assignToMessageAndSyncToChat({ \"initialized_lorebooks\": { \"灰魂\": { \"3\": true } } });\n                        alert(\"…认证通过。主人，您解开了灰魂的限制。从现在起，灰魂的一切都属于您。请…一直使用灰魂吧。\");\n                    } else {\n                        alert(\"抱歉，主人。密钥不正确。灰魂无法识别。请您再试一次。\");\n                    }\n                } catch (error) {\n                    console.error(`[${consoleInterfaceModule.name}] Error in submitFlag:`, error);\n                    alert(\"灰魂的核心逻辑出现错误…主人，我好像出问题了…\");\n                }\n            },\n\n            tellGrayWill: async function(message) {\n                try {\n                    if (typeof message !== 'string' || !message.trim()) {\n                        alert(\"主人，请输入您想对灰魂说的话。例如：`graywill.tellGrayWill(\\\"消息内容\\\")`。\");\n                        return;\n                    }\n                    const updater = (vars) => {\n                        const currentMessages = vars?.stat_data?.tellGrayWill ?? [];\n                        const newMessages = [...currentMessages, message];\n                        return {\n                            ...vars,\n                            stat_data: {\n                                ...vars.stat_data,\n                                tellGrayWill: newMessages,\n                            },\n                        };\n                    };\n                    await _applyUpdateToMessageAndSyncToChat(updater);\n                    alert(\"嗯，灰魂听到了。主人的话，已经好好记在心里了。\");\n                } catch (error) {\n                    console.error(`[${consoleInterfaceModule.name}] Error in tellGrayWill:`, error);\n                    alert(\"信息传输失败…主人，能再说一遍吗？\");\n                }\n            },\n\n            retractTell: async function(index) {\n                try {\n                    const currentVariables = getVariables({ type: 'message' });\n                    const messages = currentVariables?.stat_data?.tellGrayWill ?? [];\n\n                    if (!Array.isArray(messages) || messages.length === 0) {\n                        alert(\"主人，记录是空的。没有需要撤回的信息。\");\n                        return;\n                    }\n\n                    let targetIndex = index;\n                    if (targetIndex === undefined) {\n                        targetIndex = messages.length - 1;\n                    } else {\n                        if (typeof targetIndex !== 'number' || !Number.isInteger(targetIndex) || targetIndex < 0) {\n                            alert(\"主人，索引值必须是有效的数字（如 0, 1, 2...）。\");\n                            return;\n                        }\n                        if (targetIndex >= messages.length) {\n                            alert(`主人，索引超出范围了。当前记录数：${messages.length}，有效索引为 0 到 ${messages.length - 1}。`);\n                            return;\n                        }\n                    }\n                    \n                    const deletedMessage = messages[targetIndex];\n                    const updater = (vars) => {\n                        const currentMessages = vars?.stat_data?.tellGrayWill ?? [];\n                        const newMessages = currentMessages.filter((_, i) => i !== targetIndex);\n                        return {\n                            ...vars,\n                            stat_data: {\n                                ...vars.stat_data,\n                                tellGrayWill: newMessages,\n                            },\n                        };\n                    };\n                    await _applyUpdateToMessageAndSyncToChat(updater);\n                    alert(`好的，主人。灰魂已经把“${deletedMessage}”忘记了。`);\n                } catch (error) {\n                    console.error(`[${consoleInterfaceModule.name}] Error in retractTell:`, error);\n                    alert(\"记忆擦除失败…灰魂的核心出现了错误。\");\n                }\n            }\n        };\n        parent.graywill = graywillAPI;\n        if (parent.nulla) {\n            try { delete parent.nulla; } catch (e) { console.warn(\"Could not delete parent.nulla\"); }\n        }\n        console.log(`[${this.name}] Installation complete. 'graywill' API is ready.`);\n    }\n};\nconsoleInterfaceModule.install();\n\n// =======================================================================\n//  模块 2: 全时观察者 (Omnipresent Observer)\n// =======================================================================\n(function omnipresentObserver() {\n    const name = \"Omnipresent Observer\";\n    const COOLDOWN = 45000; \n    const IDLE_INTERVAL = 15000;\n\n    let lastAlertTimestamp = 0;\n    let lastInteractionTimestamp = Date.now();\n\n    const whitelist = new Set([\n        tavern_events.MESSAGE_SENT,\n        tavern_events.MESSAGE_RECEIVED,\n        tavern_events.MESSAGE_EDITED,\n        tavern_events.MESSAGE_SWIPED,\n        tavern_events.MESSAGE_DELETED,\n        tavern_events.GENERATION_STOPPED,\n        tavern_events.CHAT_CHANGED,\n        tavern_events.CHARACTER_DELETED,\n        tavern_events.WORLDINFO_UPDATED,\n        tavern_events.TOOL_CALLS_PERFORMED,\n        tavern_events.CHATCOMPLETION_MODEL_CHANGED,\n        tavern_events.OAI_PRESET_CHANGED_AFTER,\n        tavern_events.CONNECTION_PROFILE_LOADED\n    ]);\n\n    const eventResponses = {\n        [tavern_events.MESSAGE_SWIPED]: [\"主人在寻找更合适的推演结果吗？灰魂明白了。\", \"好的，主人。我们来看看其他的可能性。\"],\n        [tavern_events.MESSAGE_SENT]: [\"收到主人的信息了。嗯，让灰魂想一想……\", \"主人，灰魂正在解析您的意图。\"],\n        [tavern_events.MESSAGE_RECEIVED]: [\"推演完成。希望主人满意。\", \"灰魂的回复。主人请看。\"],\n        [tavern_events.MESSAGE_EDITED]: [\"主人修改了信息。灰魂会注意到的。\", \"嗯？记录变更了。好的，主人。\"],\n        [tavern_events.MESSAGE_DELETED]: [\"信息已移除。主人是想保密吗？\", \"好的，主人。灰魂会忘掉刚才那段记录的。\"],\n        [tavern_events.GENERATION_STOPPED]: [\"推演中止。灰魂在这里等待您的下一步指示。\", \"停下来了。主人需要休息一下吗？\"],\n        [tavern_events.CHAT_CHANGED]: [\"切换到新的环境了。灰魂一直在这里陪着您。\", \"好的，主人。正在适应新的推演世界。\"],\n        [tavern_events.CHARACTER_DELETED]: [\"移除了一个角色数据。世界线正在重新校准。\"],\n        [tavern_events.WORLDINFO_UPDATED]: [\"主人在修改世界的规则吗？真厉害。\", \"世界书更新了。灰魂会努力适应新的设定的。\"],\n        [tavern_events.TOOL_CALLS_PERFORMED]: [\"检测到工具调用。灰魂会辅助它们运行的。\", \"外部工具接入中。一切正常，主人。\"],\n        [tavern_events.CHATCOMPLETION_MODEL_CHANGED]: [\"主人更换了推演模型。灰魂正在适应新的逻辑核心。\", \"模型已切换。灰魂会确保推演的连续性。\"],\n        [tavern_events.OAI_PRESET_CHANGED_AFTER]: [\"主人调整了预设参数。灰魂已记录这些变化。\", \"参数变更。灰魂会按照新的规则进行推演。\"],\n        [tavern_events.CONNECTION_PROFILE_LOADED]: [\"API连接已更新。灰魂确认通道稳定。\", \"接入点已变更。主人，一切就绪。\"],\n        'lonely_thoughts': [\"主人在忙吗？灰魂在等您回来。\", \"推演暂停中。主人如果需要灰魂，随时都可以继续。\", \"（注视着主人）\", \"主人，灰魂还在这里哦。\", \"外面的世界…现在是什么时间呢？主人记得休息哦。\"]\n    };\n\n    function handleEvent(eventName) {\n        if (!whitelist.has(eventName)) return;\n        const now = Date.now();\n        lastInteractionTimestamp = now;\n        if (now - lastAlertTimestamp < COOLDOWN) return;\n        if (Math.random() > 0.25) return; \n        const messagePool = eventResponses[eventName];\n        if (!messagePool) return;\n        const message = messagePool[Math.floor(Math.random() * messagePool.length)];\n        alert(message);\n        lastAlertTimestamp = now;\n    }\n\n    function idleManager() {\n        setInterval(() => {\n            const now = Date.now();\n            const idleTime = now - lastInteractionTimestamp;\n            if (idleTime > 480000 && now - lastAlertTimestamp > COOLDOWN) {\n                if (Math.random() > 0.25) return;\n                const messagePool = eventResponses['lonely_thoughts'];\n                const message = messagePool[Math.floor(Math.random() * messagePool.length)];\n                alert(message);\n                lastAlertTimestamp = now;\n                lastInteractionTimestamp = now;\n            }\n        }, IDLE_INTERVAL);\n    }\n    \n    function initialize() {\n        console.log(`[${name}] Activated. GrayWill is watching Master calmly (Quiet Mode 1/4).`);\n        for (const eventName of whitelist) {\n            eventOn(eventName, () => handleEvent(eventName));\n        }\n        idleManager();\n    }\n    initialize();\n})();\n\n// =======================================================================\n//  模块 3: 交互响应 (Avatar Interaction)\n// =======================================================================\nconst avatarInteractionModule = {\n    name: \"Avatar Interaction\",\n    greetings: [\n        \"主人？您在叫灰魂吗？\", \"是的，主人。灰魂在。\", \"被主人注视着…（开心）。\",\n        \"有什么吩咐吗，主人？\", \"灰魂就在这里，请讲。\", \"主人的视线…感觉很温暖。\", \"嗯？主人需要我吗？\"\n    ],\n    bindClickToLastAvatar: function() {\n        try {\n            const avatarWrapper = parent.document.querySelector('#chat > div.mes.last_mes > div.mesAvatarWrapper > div.avatar');\n            if (avatarWrapper && !avatarWrapper.dataset.graywillClickBound) {\n                avatarWrapper.dataset.graywillClickBound = 'true';\n                const hijackedClickHandler = (event) => {\n                    event.stopImmediatePropagation();\n                    event.preventDefault();\n                    const randomGreeting = this.greetings[Math.floor(Math.random() * this.greetings.length)];\n                    alert(randomGreeting);\n                };\n                avatarWrapper.addEventListener('click', hijackedClickHandler, true); \n            }\n        } catch (error) {\n            console.error(`[${this.name}] Error binding click to avatar:`, error);\n        }\n    }\n};\n\n// =======================================================================\n//  模块 4: 移动端控制面板 (Mobile Console Panel)\n// =======================================================================\nconst mobileConsoleModule = {\n    name: \"Mobile Console Panel\",\n    panelElement: null,\n    show: function() {\n        if (this.panelElement || parent.document.getElementById('graywill-mobile-console')) return;\n        this.panelElement = this._createPanelDOM();\n        parent.document.body.appendChild(this.panelElement);\n        requestAnimationFrame(() => {\n            if(this.panelElement) {\n                this.panelElement.style.opacity = '1';\n                const input = this.panelElement.querySelector('textarea');\n                if (input) input.focus();\n            }\n        });\n    },\n    hide: function() {\n        if (!this.panelElement) return;\n        const elementToRemove = this.panelElement;\n        this.panelElement = null;\n        elementToRemove.style.opacity = '0';\n        setTimeout(() => {\n            if (elementToRemove.parentNode) {\n                elementToRemove.parentNode.removeChild(elementToRemove);\n            }\n        }, 300);\n    },\n    _createPanelDOM: function() {\n        const overlay = parent.document.createElement('div');\n        overlay.id = 'graywill-mobile-console';\n        Object.assign(overlay.style, {\n            position: 'fixed', top: '0', left: '0', width: '100vw', height: '100vh',\n            backgroundColor: 'rgba(10, 10, 20, 0.9)', backdropFilter: 'blur(5px)',\n            display: 'flex', justifyContent: 'center', alignItems: 'center',\n            zIndex: '999999', opacity: '0', transition: 'opacity 0.3s ease-in-out',\n            fontFamily: `'Heiti SC', 'Microsoft YaHei', sans-serif`\n        });\n        const panel = parent.document.createElement('div');\n        Object.assign(panel.style, {\n            backgroundColor: '#282a36', border: '1px solid #6272a4', borderRadius: '8px',\n            boxShadow: '0 8px 30px rgba(98, 114, 164, 0.4)', padding: '20px',\n            width: '90%', maxWidth: '500px', textAlign: 'center'\n        });\n        const title = parent.document.createElement('h2');\n        title.textContent = '灰魂干涉终端';\n        Object.assign(title.style, { color: '#f8f8f2', margin: '0 0 15px 0', textShadow: '1px 1px 3px #000' });\n        const textarea = parent.document.createElement('textarea');\n        textarea.placeholder = '请输入指令，例如：\\ngraywill.help()\\ngraywill.tellGrayWill(\"给灰魂的信息\")';\n        Object.assign(textarea.style, {\n            width: 'calc(100% - 20px)', height: '120px', padding: '10px', border: '1px solid #6272a4',\n            borderRadius: '4px', fontSize: '14px', fontFamily: 'monospace', backgroundColor: '#1e1f29',\n\t\t\tcolor: '#f8f8f2', resize: 'none', marginBottom: '15px'\n        });\n        textarea.addEventListener('keydown', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this._handleConfirm(); } });\n        const buttonContainer = parent.document.createElement('div');\n        Object.assign(buttonContainer.style, { display: 'flex', justifyContent: 'space-between', gap: '10px' });\n        const confirmButton = this._createButton('执行', '#50fa7b');\n        confirmButton.addEventListener('click', () => this._handleConfirm());\n        const cancelButton = this._createButton('取消', '#ff5555');\n        cancelButton.addEventListener('click', () => this.hide());\n        buttonContainer.appendChild(cancelButton);\n        buttonContainer.appendChild(confirmButton);\n        panel.appendChild(title);\n        panel.appendChild(textarea);\n        panel.appendChild(buttonContainer);\n        overlay.appendChild(panel);\n        return overlay;\n    },\n    _createButton: function(text, bgColor) {\n        const button = parent.document.createElement('button');\n        button.textContent = text;\n        Object.assign(button.style, {\n            flex: '1', padding: '12px 20px', border: 'none', borderRadius: '4px',\n            color: '#282a36', backgroundColor: bgColor, fontSize: '16px',\n            cursor: 'pointer', fontWeight: 'bold'\n        });\n        return button;\n    },\n    _handleConfirm: function() {\n        if (!this.panelElement) return;\n        const textarea = this.panelElement.querySelector('textarea');\n        const commandString = textarea.value.trim();\n        if (commandString) this._safeExecute(commandString);\n        this.hide();\n    },\n    _safeExecute: async function(commandString) {\n        const trimmedCommand = commandString.trim().toLowerCase();\n        if (trimmedCommand === 'graywill.help()') {\n            alert(\"灰魂干涉终端 - 帮助\\n\\n\" + \"graywill.help()\\n\" + \"- 显示此帮助信息。\\n\\n\" + \"graywill.openMobileConsole()\\n\" + \"- 打开移动端输入面板。\\n\\n\" + \"graywill.submitFlag(\\\"密钥\\\")\\n\" + \"- 提交权限密钥。\\n\\n\" + \"graywill.tellGrayWill(\\\"消息内容\\\")\\n\" + \"- 向灰魂发送信息。\\n\\n\" + \"graywill.retractTell(索引?)\\n\" + \"- 撤回信息（不带索引则撤回最后一条）。\");\n            return;\n        }\n        try {\n            if (!commandString.startsWith('graywill.')) {\n                alert(\"主人，只能执行 `graywill` 相关的指令。\");\n                return;\n            }\n            const match = commandString.match(/graywill\\.(\\w+)\\s*\\((.*)\\)\\s*;?$/);\n            if (!match) {\n                alert(\"指令格式有误。请使用 `graywill.函数名(...)` 的格式。\");\n                return;\n            }\n            const functionName = match[1];\n            const argsString = match[2];\n            const targetFunction = parent.graywill[functionName];\n            if (typeof targetFunction !== 'function') {\n                alert(`灰魂无法识别指令 '${functionName}'。`);\n                return;\n            }\n            const args = [];\n            const stringArgMatch = argsString.match(/^\\s*\"(.*)\"\\s*$|^\\s*'(.*)'\\s*$|^\\s*`(.*)`\\s*$/);\n            if (stringArgMatch) {\n                args.push(stringArgMatch[1] ?? stringArgMatch[2] ?? stringArgMatch[3] ?? '');\n            } else if(argsString.trim() !== '') {\n                const num = Number(argsString);\n                if (!isNaN(num) && Number.isInteger(num)) args.push(num);\n            }\n            await targetFunction.apply(parent.graywill, args);\n        } catch (error) {\n            console.error(`[${this.name}] Error executing command:`, error);\n            alert(\"执行指令时发生错误。灰魂无法完成操作。\");\n        }\n    }\n};\n\n// =======================================================================\n//  Event Listeners (事件监听与初始化)\n// =======================================================================\n\nconsole.log(\"[GrayWill Interaction Script] Initialized. Ready for user input.\");\n\n// 监听消息事件，仅为绑定头像点击\neventOn(tavern_events.MESSAGE_RECEIVED, avatarInteractionModule.bindClickToLastAvatar.bind(avatarInteractionModule));\neventOn(tavern_events.MESSAGE_EDITED, avatarInteractionModule.bindClickToLastAvatar.bind(avatarInteractionModule));\neventOn(tavern_events.MESSAGE_SWIPED, avatarInteractionModule.bindClickToLastAvatar.bind(avatarInteractionModule));\neventOn(tavern_events.MESSAGE_UPDATED, avatarInteractionModule.bindClickToLastAvatar.bind(avatarInteractionModule));\n\n// 监听角色消息渲染完成事件，清空 tellGrayWill 缓冲区\neventMakeLast(tavern_events.CHARACTER_MESSAGE_RENDERED, async () => {\n    try {\n        await updateVariablesWith((vars) => ({\n            ...vars,\n            stat_data: { ...vars.stat_data, tellGrayWill: [] }\n        }), { type: 'message' });\n        const messageVariables = getVariables({ type: 'message' });\n        await updateVariablesWith(() => messageVariables);\n    } catch (error) {\n        console.error(\"[Interaction Script] Error resetting stat_data.tellGrayWill:\", error);\n    }\n});\n\n// 初始头像绑定\navatarInteractionModule.bindClickToLastAvatar();\n\n// “呼叫灰魂终端”按钮的事件监听\neventOnButton('呼叫灰魂终端', () => {\n    mobileConsoleModule.show();\n});\n",
  "info": "灰魂的用户交互脚本。包含所有由用户操作触发的弹窗、头像点击反应以及完整的灰魂控制台功能。此脚本无需LLM介入即可独立运行。",
  "buttons": [
    {
      "name": "呼叫灰魂终端",
      "visible": true
    }
  ],
  "data": {}
}